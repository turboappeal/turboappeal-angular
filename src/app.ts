// Generated by typings
// Source: https://raw.githubusercontent.com/DefinitelyTyped/DefinitelyTyped/7de6c3dd94feaeb21f20054b9f30d5dabc5efabd/jssha/jssha-1.6.0.d.ts
declare namespace CryptoJS {
    export interface CryptoJS {
        HmacSHA256(text:string, secret:string):string;
    }
}

declare var CryptoJS: CryptoJS.CryptoJS;
export interface IAuthenticationInterceptor {
    request(request): ng.IPromise<any>;
    requestError(requestError): void;
    response(response): void;
    responseError(responseError): void;
}
export class AuthenticationProvider implements ng.IServiceProvider{
    private static $inject: Array<string> = [];
    private publicKey: string;
    private privateKey: string;
    constructor() {
      this.$get.$inject = [];
    }
    public setPublicKey = (key) => {
      this.publicKey = key;
      return this.publicKey;
    }
    public setSecretKey = (key) => {
      this.privateKey = key;
      return this.privateKey;
    }
    public getKey = () => {
      return this.publicKey;
    }
    public getSecret = () => {
      return this.privateKey;
    }
    public $get(){
        return new AuthenticationProvider;
    }
}
export class AuthenticationInterceptor implements IAuthenticationInterceptor {
    private static $inject: Array<string> = ['$q', '$location', '$injector', 'turboappealProvider'];
    private tsHeader: string;
    private authKeyHeader: string;
    private authSigHeader: string;
    private authHeader: string;
    private publicKey: string;
    private privateKey: string;
    constructor(private $q: ng.IQService, private $location: ng.ILocationService, private $injector: ng.auto.IInjectorService, private AuthConfig: AuthenticationProvider) {
        this.tsHeader = 'Timestamp';
        this.authKeyHeader = 'Authentication-Key';
        this.authSigHeader = 'Authentication-Signature';
        this.authHeader = 'Authorization';
        this.publicKey = AuthConfig.getKey();
        this.privateKey = AuthConfig.getSecret();
    }
    public request = (req) => {
      this.publicKey = this.AuthConfig.getKey();
      this.privateKey = this.AuthConfig.getSecret();

      if (req.skipAuthorization || req.url.indexOf('.turboappeal.com/') == -1)
          return req;

      // Get the req headers if they exist
      req.headers = req.headers || {};

      // Already has an Authorization key header
      if (req.headers[this.authKeyHeader] || !this.privateKey || !this.publicKey)
          return req;

      // Timestamp
      // Method Verb (GET, UPDATE, PUT, POST, DELETE)
      // Uri (decoded)
      // Separated with \n
      var timestamp = moment().format('MM/DD/YYYY hh:mm:ss A');
      var hashedSig;
      req.headers[this.tsHeader] = timestamp;
      req.headers[this.authKeyHeader] = this.publicKey;
      var shaObj = CryptoJS.HmacSHA256(timestamp + '\n' + req.method + '\n' + req.url.substr(req.url.indexOf('/')), this.privateKey);
      req.headers[this.authSigHeader] = shaObj.toString();

      return req;
    }

    public requestError = (requestError) => {
      return requestError;
    };
    public response = (response) => {
      return response;
    };
    public responseError = (responseError) => {
      return responseError;
    };
    public static Factory($q: ng.IQService, $location: ng.ILocationService, $injector: ng.auto.IInjectorService, AuthConfig: AuthenticationProvider){
        return new AuthenticationInterceptor($q, $location, $injector, AuthConfig);
    }
}
angular.module('turboappealApi', [])
.provider('turboappealProvider', AuthenticationProvider)
.factory('turboappealSignature', ['$q', '$location', '$injector', 'turboappealProvider', AuthenticationInterceptor.Factory]);
// Generated by typings
// Source: https://raw.githubusercontent.com/DefinitelyTyped/DefinitelyTyped/7de6c3dd94feaeb21f20054b9f30d5dabc5efabd/jssha/jssha-1.6.0.d.ts
declare namespace jsSHA {
    export interface OutputFormatOptions {
        outputUpper? : boolean;
        b64Pad? : string;
    }

    export interface jsSHA {
        new (srcString:string, inputFormat:string, encoding?:string):jsSHA;
        getHash(variant:string, format:string, numRounds?:number, outputFormatOpts?:OutputFormatOptions):string;
        getHMAC(key:string):string;
        setHMACKey(key:string, inputFormat:string):string;
        update(key:string):string;
    }
}

declare var jsSHA: jsSHA.jsSHA;
export interface IAuthenticationInterceptor {
    request(request): ng.IPromise<any>;
    requestError(requestError): void;
    response(response): void;
    responseError(responseError): void;
}
export class AuthenticationProvider implements ng.IServiceProvider{
    private static $inject: Array<string> = [];
    private publicKey: string;
    private privateKey: string;
    constructor() {
    }
    public setPublicKey = (key) => {
      this.publicKey = key;
      return this.publicKey;
    }
    public setSecretKey = (key) => {
      this.privateKey = key;
      return this.privateKey;
    }
    public getKey = () => {
      return this.publicKey;
    }
    public getSecret = () => {
      return this.privateKey;
    }
    public $get(){
        return new AuthenticationProvider;
    }
}
export class AuthenticationInterceptor implements IAuthenticationInterceptor {
    private static $inject: Array<string> = ['$q', '$location', '$injector', 'authenticationProvider'];
    private tsHeader: string;
    private authKeyHeader: string;
    private authSigHeader: string;
    private authHeader: string;
    private publicKey: string;
    private privateKey: string;
    constructor(private $q: ng.IQService, private $location: ng.ILocationService, private $injector: ng.auto.IInjectorService, AuthConfig: AuthenticationProvider) {
        this.tsHeader = 'Timestamp';
        this.authKeyHeader = 'Authentication-Key';
        this.authSigHeader = 'Authentication-Signature';
        this.authHeader = 'Authorization';
        this.publicKey = AuthConfig.getKey();
        this.privateKey = AuthConfig.getSecret();
    }
    public request = (req) => {
      if (req.skipAuthorization)
          return req;

      // Get the req headers if they exist
      req.headers = req.headers || {};

      // Already has an Authorization key header
      if (req.headers[this.authKeyHeader])
          return req;

      // Timestamp
      // Method Verb (GET, UPDATE, PUT, POST, DELETE)
      // Uri (decoded)
      // Separated with \n
      var timestamp = moment().format('MM/DD/YYYY hh:mm:ss A');
      var hashedSig;
      req.headers[this.tsHeader] = timestamp;
      req.headers[this.authKeyHeader] = this.publicKey;
      var shaObj = new jsSHA('SHA-256', "TEXT");
      shaObj.setHMACKey(this.privateKey, "TEXT");
      shaObj.update(timestamp + '\n' + req.method + '\n' + req.url.substr(req.url.indexOf('/')));
      req.headers[this.authSigHeader] = shaObj.getHMAC("HEX");

      return req;
    }

    public requestError = (requestError) => {};
    public response = (response) => {};
    public responseError = (responseError) => {};
    public static Factory($q: ng.IQService, $location: ng.ILocationService, $injector: ng.auto.IInjectorService, AuthConfig: AuthenticationProvider){
        return new AuthenticationInterceptor($q, $location, $injector, AuthConfig);
    }
}
angular.module('turboappealApi', [])
.provider('turboappealProvider', AuthenticationProvider)
.factory('turboappealSignature', ['$q', '$location', '$injector', 'turboappealProvider', AuthenticationInterceptor.Factory]);